#!/usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const fs = require('fs')
const path = require('path')
const {
  createFile,
  hasFile
} = require('../utils/file')
const { STYLE_TYPE } = require('../config')

// Set config
let CONFIG
try {
  let configPath = fs.existsSync(path.resolve('./.vue-make.json'))
    ? './.vue-make.json'
    : path.resolve(__dirname, '../templates/.vue-make/default.json')
  CONFIG = JSON.parse(fs.readFileSync(configPath, 'utf8'))
} catch (e) {
  throw `error parsing configuration file`
}

const createStyleFile = ({
  from,
  to,
  name,
  stylePrefix
}) => {
  let styleType = STYLE_TYPE[CONFIG.styleType] || 'css'
  createFile({
    from: path.resolve(__dirname, `../templates/style/style.${styleType}`),
    to: `${to}/style.${styleType}`,
    replace: [
      {
        from: 'name',
        to: stylePrefix
          ? `${stylePrefix}${name}`
          : name
      }
    ]
  })
}

const cancelled = e => {
  console.log(chalk.yellow('cancelled'))
  if (e) console.log(e)
}

program
  .version('2.0.0')

program
  .command('init [type]')
  .description(chalk.gray('init'))
  .action((type = 'default') => {
    hasFile({
      to: `./.vue-make.json`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, `../templates/.vue-make/${type}.json`),
        to: `./.vue-make.json`
      })
    }).catch(cancelled)
  })

program
  .command('page [path]')
  .description(chalk.gray('create a new page'))
  .action((pagePath, options) => {
    if (pagePath) {
      if (pagePath.indexOf('/') !== 0) pagePath = `/${pagePath}`
      hasFile({
        to: `${CONFIG.page.directory}${pagePath}`
      }).then(() => {
        let name = pagePath.split('/').pop().toLowerCase()
        createFile({
          from: path.resolve(__dirname, `../templates/[page]/index.vue`),
          to: `${CONFIG.page.directory}${pagePath}/index.vue`,
          replace: [
            {
              from: 'name',
              to: name
            },
            {
              from: 'className',
              to: CONFIG.page.stylePrefix
                ? `${CONFIG.page.stylePrefix}${name}`
                : name
            },
            {
              from: 'styleType',
              to: CONFIG.styleType
                ? ` lang="${CONFIG.styleType}"`
                : ''
            }
          ]
        })
        createStyleFile({
          to: `${CONFIG.page.directory}${pagePath}`,
          name,
          stylePrefix: CONFIG.page.stylePrefix
        })
      }).catch(cancelled)
    }
  })

program
  .command('view [path]')
  .description(chalk.gray('create a new view'))
  .action((viewPath, options) => {
    if (viewPath) {
      if (viewPath.indexOf('/') !== 0) viewPath = `/${viewPath}`
      hasFile({
        to: `${CONFIG.view.directory}${viewPath}`
      }).then(() => {
        let name = viewPath.split('/').pop().toLowerCase()
        createFile({
          from: path.resolve(__dirname, `../templates/[view]/index.vue`),
          to: `${CONFIG.view.directory}${viewPath}/index.vue`,
          replace: [
            {
              from: 'name',
              to: name
            },
            {
              from: 'className',
              to: CONFIG.view.stylePrefix
                ? `${CONFIG.view.stylePrefix}${name}`
                : name
            },
            {
              from: 'styleType',
              to: CONFIG.styleType
                ? ` lang="${CONFIG.styleType}"`
                : ''
            }
          ]
        })
        createStyleFile({
          to: `${CONFIG.view.directory}${viewPath}`,
          name,
          stylePrefix: CONFIG.view.stylePrefix
        })
      }).catch(cancelled)
    }
  })

program
  .command('component [name]')
  .description(chalk.gray('create a new component'))
  .action((name, options) => {
    if (name) {
      hasFile({
        to: `./src/components/${name}`
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, `../templates/[component]/index.vue`),
          to: `./src/components/${name}/index.vue`,
          replace: [
            {
              from: 'name',
              to: name
            },
            {
              from: 'styleType',
              to: ''
            }
          ]
        })
        createStyleFile({
          to: `./src/components/${name}`,
          name,
          stylePrefix: CONFIG.component.stylePrefix
        })
      }).catch(cancelled)
    }
  })

program
  .command('mixin [name]')
  .description(chalk.gray('create a new mixin'))
  .action((name, options) => {
    if (name) {
      hasFile({
        to: `./src/mixins/${name}.js`
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, '../templates/[mixin].js'),
          to: `./src/mixins/${name}.js`,
          replace: [
            {
              from: 'name',
              to: name
            }
          ]
        })
      }).catch(cancelled)
    }
  })

program
  .command('store-module [name]')
  .description(chalk.gray('create a new module for store'))
  .action((name, options) => {
    hasFile({
      to: `./src/store/modules/${name}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[store-module].js'),
        to: `./src/store/modules/${name}.js`
      })
    }).catch(() => {
      console.log(chalk.yellow('cancelled'))
    })
  })

program
  .command('directive [name]')
  .description(chalk.gray('create a new directive'))
  .action((name, options) => {
    hasFile({
      to: `./src/directives/${name}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[directive].js'),
        to: `./src/directives/${name}.js`,
        replace: [
          {
            from: 'name',
            to: name
          }
        ]
      })
    }).catch(() => {
      console.log(chalk.yellow('cancelled'))
    })
  })

program.on('--help', () => {
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    $ vue-make --help')
  console.log('    $ vue-make -h')
})

program.parse(process.argv)
