#!/usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const fs = require('fs')
const path = require('path')

const {
  createFile,
  hasFile
} = require('../utils/file')
const { STYLE_TYPE } = require('../config')
const log = require('../utils/log')

let CONFIG
let STYLE

const getConfig = () => {
  try {
    CONFIG = JSON.parse(fs.readFileSync('./.vue-make.json', 'utf8'))
    STYLE = STYLE_TYPE[CONFIG.styleType]
  } catch (e) {
    console.log(`- Run ${chalk.yellow('vue-make init')} first`)
  }
}

const createStyleFile = ({
  to,
  replace
}) => {
  createFile({
    from: path.resolve(__dirname, `../templates/style/style.${STYLE}`),
    to: `${to}/style.${STYLE}`,
    replace
  })
}

const createLayout = fullPath => {
  let pathSplit = fullPath.split('/')
  let currentPath = ''
  for (let i in pathSplit) {
    if (i > 0 && i < pathSplit.length - 1) {
      currentPath += `/${pathSplit[i]}`
      let className = CONFIG.stylePrefix || CONFIG.targetDirectoryPrefix
        ? `${CONFIG.stylePrefix}${pathSplit[i]}`
        : pathSplit[i]
      let to = `${CONFIG.directory}${currentPath}/layout`
      hasFile({
        to,
        tip: false
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, `../templates/[layout]/index.vue`),
          to: `${to}/index.vue`,
          replace: [
            { from: 'className', to: className }
          ]
        })
      }).catch(console.log)
    }
  }
}

program
  .version('2.2.8')

program
  .command('init [type]')
  .description(chalk.gray('init'))
  .action((type = 'default') => {
    hasFile({
      to: `./.vue-make.json`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, `../templates/.vue-make/${type}.json`),
        to: `./.vue-make.json`,
        tip: false
      })
    }).catch(log.cancelled)
  })

program
  .command('page [path]')
  .description(chalk.gray('create a new page'))
  .action((pagePath) => {
    if (pagePath) {
      getConfig()
      if (CONFIG) {
        CONFIG = CONFIG.page
      } else {
        return
      }

      if (pagePath.indexOf('/') !== 0) pagePath = `/${pagePath}`
      let originName = pagePath.split('/').pop().toLowerCase()
      let name = `${CONFIG.targetDirectoryPrefix}${originName}`
      let to = `${CONFIG.directory}${pagePath.replace(originName, name)}`
      let className = CONFIG.stylePrefix || CONFIG.targetDirectoryPrefix ? `${CONFIG.stylePrefix}${name}` : name
      let styleType = STYLE
      let styleTypeLang = STYLE ? ` lang="${STYLE}"` : ''
      hasFile({
        to
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, `../templates/[page]/index.vue`),
          to: `${to}/index.vue`,
          replace: [
            { from: 'name', to: name },
            { from: 'className', to: className },
            { from: 'styleType', to: styleType },
            { from: 'styleTypeLang', to: styleTypeLang }
          ]
        })
        createStyleFile({
          to,
          replace: [
            { from: 'className', to: className }
          ]
        })
        if (CONFIG.layout) {
          createLayout(pagePath)
        }
      }).catch(log.cancelled)
    }
  })

program
  .command('view [path]')
  .description(chalk.gray('create a new view'))
  .action((viewPath) => {
    if (viewPath) {
      getConfig()
      if (CONFIG) {
        CONFIG = CONFIG.view
      } else {
        return
      }

      if (viewPath.indexOf('/') !== 0) viewPath = `/${viewPath}`
      let originName = viewPath.split('/').pop().toLowerCase()
      let name = `${CONFIG.targetDirectoryPrefix}${originName}`
      let to = `${CONFIG.directory}${viewPath.replace(originName, name)}`
      let className = CONFIG.stylePrefix || CONFIG.targetDirectoryPrefix ? `${CONFIG.stylePrefix}${name}` : name
      let styleType = STYLE
      let styleTypeLang = STYLE ? ` lang="${STYLE}"` : ''
      hasFile({
        to
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, `../templates/[view]/index.vue`),
          to: `${to}/index.vue`,
          replace: [
            { from: 'name', to: name },
            { from: 'className', to: className },
            { from: 'styleType', to: styleType },
            { from: 'styleTypeLang', to: styleTypeLang }
          ]
        })
        createStyleFile({
          to,
          replace: [
            { from: 'className', to: className }
          ]
        })
        if (CONFIG.layout) {
          createLayout(viewPath)
        }
      }).catch(log.cancelled)
    }
  })

program
  .command('component [name]')
  .description(chalk.gray('create a new component'))
  .action((name) => {
    if (name) {
      getConfig()
      if (CONFIG) {
        CONFIG = CONFIG.component
      } else {
        return
      }

      hasFile({
        to: `${CONFIG.directory}/${name}`
      }).then(() => {
        name = `${CONFIG.targetDirectoryPrefix}${name}`
        let to = `${CONFIG.directory}/${name}`
        let className = CONFIG.stylePrefix || CONFIG.targetDirectoryPrefix ? `${CONFIG.stylePrefix}${name}` : name
        let styleType = STYLE
        let styleTypeLang = STYLE ? ` lang="${STYLE}"` : ''
        createFile({
          from: path.resolve(__dirname, `../templates/[component]/index.vue`),
          to: `${to}/index.vue`,
          replace: [
            { from: 'name', to: name },
            { from: 'className', to: className },
            { from: 'styleType', to: styleType },
            { from: 'styleTypeLang', to: styleTypeLang }
          ]
        })
        createStyleFile({
          to,
          replace: [
            { from: 'className', to: className }
          ]
        })
      }).catch(log.cancelled)
    }
  })

program
  .command('mixin [name]')
  .description(chalk.gray('create a new mixin'))
  .action((name) => {
    if (name) {
      getConfig()
      if (CONFIG) {
        CONFIG = CONFIG.mixin
      } else {
        return
      }

      let to = `${CONFIG.directory}/${name}.js`
      hasFile({
        to
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, '../templates/[mixin].js'),
          to,
          replace: [
            { from: 'name', to: name }
          ]
        })
      }).catch(log.cancelled)
    }
  })

program
  .command('store-module [name]')
  .description(chalk.gray('create a new module for store'))
  .action((name) => {
    if (name) {
      getConfig()
      if (CONFIG) {
        CONFIG = CONFIG.store
      } else {
        return
      }

      const create = () => {
        let to = `${CONFIG.directory}/modules/${name}.js`
        hasFile({
          to
        }).then(() => {
          createFile({
            from: path.resolve(__dirname, '../templates/[store-module].js'),
            to
          })
        }).catch(log.cancelled)
      }
      const store = () => {
        let to = `${CONFIG.directory}/index.js`
        createFile({
          from: path.resolve(__dirname, '../templates/store/index.js'),
          to,
          replace: [
            { from: 'name', to: name }
          ]
        })
        createFile({
          from: path.resolve(__dirname, '../templates/store/mutation-types.js'),
          to: `${CONFIG.directory}/mutation-types.js`
        })
      }
      hasFile({
        to: `${CONFIG.directory}/index.js`,
        tip: false
      }).then(() => {
        store()
        create()
      }).catch(() => {
        create()
      })
    }
  })

program
  .command('directive [name]')
  .description(chalk.gray('create a new directive'))
  .action((name) => {
    if (name) {
      getConfig()
      if (CONFIG) {
        CONFIG = CONFIG.directive
      } else {
        return
      }

      hasFile({
        to: `${CONFIG.directory}/${name}.js`
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, '../templates/[directive].js'),
          to: `${CONFIG.directory}/${name}.js`,
          replace: [
            { from: 'name', to: name }
          ]
        })
      }).catch(log.cancelled)
    }
  })

program
  .command('env')
  .description(chalk.gray('create environment files'))
  .action((name) => {
    if (name) {
      getConfig()
      if (CONFIG) {
        CONFIG = CONFIG.directive
      } else {
        return
      }

      const ENVS = ['.env.test', '.env.development', '.env.production']

      hasFile({
        to: `.env`
      }).then(() => {
        for (let env of ENVS) {
          createFile({
            from: path.resolve(__dirname, '../templates/env/.env.[build]'),
            to: env
          })
        }
        createFile({
          from: path.resolve(__dirname, '../templates/env/.env'),
          to: '.env'
        })
      }).catch(log.cancelled)
    }
  })

program.on('--help', () => {
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    $ vue-make init')
  console.log('    $ vue-make page /page')
  console.log('    $ vue-make view /view')
  console.log('    $ vue-make component component')
  console.log('    $ vue-make mixin mixin')
  console.log('    $ vue-make store-module module')
  console.log('    $ vue-make directive directive')
})

program.parse(process.argv)
