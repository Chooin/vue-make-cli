#!/usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const fs = require('fs')
const path = require('path')
const {
  createFile,
  hasFile
} = require('../utils/file')

const excludeFiles = ['.DS_Store']
const styleType = {
  scss: 'scss',
  sass: 'sass',
  less: 'less',
  stylus: 'styl'
}

program
  .version('2.0.0')

program
  .command('init [type]')
  .description(chalk.gray('Init'))
  .action((type = 'default') => {
    hasFile({
      to: `./.vue-make.json`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, `../templates/.vue-make/${type}.json`),
        to: `./.vue-make.json`
      })
    }).catch(() => {
      console.log(chalk.yellow('cancelled'))
    })
  })

program
  .command('view [path]')
  .description(chalk.gray('Create a new view'))
  .action((viewPath, options) => {
    if (viewPath) {
      hasFile({
        to: `./src/views/${viewPath}`
      }).then(() => {
        fs.readdirSync(path.resolve(__dirname, '../templates/[view]')).forEach(file => {
          if (!excludeFiles.includes(file)) {
            createFile({
              from: path.resolve(__dirname, `../templates/[view]/${file}`),
              to: `./src/views/${viewPath}/${file}`,
              replace: [
                {
                  from: /\[replace\]/g,
                  to: viewPath.split('/').pop().toLowerCase()
                },
                {
                  from: /\[styleType\]/g,
                  to: ''
                }
              ]
            })
          }
        })
      }).catch(() => {
        console.log(chalk.yellow('cancelled'))
      })
    }
  })

program
  .command('page [path]')
  .description(chalk.gray('Create a new page'))
  .action((pagePath, options) => {
    if (pagePath) {
      hasFile({
        to: `./src/pages/${pagePath}`
      }).then(() => {
        fs.readdirSync(path.resolve(__dirname, '../templates/[page]')).forEach(file => {
          if (!excludeFiles.includes(file)) {
            createFile({
              from: path.resolve(__dirname, `../templates/[page]/${file}`),
              to: `./src/pages/${pagePath}/${file}`,
              replace: [
                {
                  from: /\[replace\]/g,
                  to: pagePath.split('/').pop().toLowerCase()
                },
                {
                  from: /\[styleType\]/g,
                  to: ''
                }
              ]
            })
          }
        })
      }).catch(() => {
        console.log(chalk.yellow('cancelled'))
      })
    }
  })

program
  .command('component [name]')
  .description(chalk.gray('Create a new component'))
  .action((name, options) => {
    if (name) {
      hasFile({
        to: `./src/components/${name}`
      }).then(() => {
        fs.readdirSync(path.resolve(__dirname, '../templates/[component]')).forEach(file => {
          if (!excludeFiles.includes(file)) {
            createFile({
              from: path.resolve(__dirname, `../templates/[component]/${file}`),
              to: `./src/components/${name}/${file}`,
              replace: [
                {
                  from: /\[replace\]/g,
                  to: name
                },
                {
                  from: /\[styleType\]/g,
                  to: ''
                }
              ]
            })
          }
        })
      }).catch(() => {
        console.log(chalk.yellow('cancelled'))
      })
    }
  })

program
  .command('mixin [name]')
  .description(chalk.gray('Create a new mixin'))
  .action((name, options) => {
    if (name) {
      hasFile({
        to: `./src/mixins/${name}.js`
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, '../templates/[mixin].js'),
          to: `./src/mixins/${name}.js`,
          replace: [
            {
              from: /\[replace\]/g,
              to: name
            }
          ]
        })
      }).catch(() => {
        console.log(chalk.yellow('cancelled'))
      })
    }
  })

program
  .command('store-module [name]')
  .description(chalk.gray('Create a new module for store'))
  .action((moduleName, options) => {
    hasFile({
      to: `./src/store/modules/${moduleName}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[store-module].js'),
        to: `./src/store/modules/${moduleName}.js`,
        replace: [
          {
            from: /\[replace\]/g,
            to: moduleName
          }
        ]
      })
    }).catch(() => {
      console.log(chalk.yellow('cancelled'))
    })
  })

program
  .command('directive [name]')
  .description(chalk.gray('Create a new directive'))
  .action((name, options) => {
    hasFile({
      to: `./src/directives/${name}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[directive].js'),
        to: `./src/directives/${name}.js`,
        replace: [
          {
            from: /\[replace\]/g,
            to: name
          }
        ]
      })
    }).catch(() => {
      console.log(chalk.yellow('cancelled'))
    })
  })

// program
//   .command('*')
//   .action(function (name, options) {
//     console.log(name, options)
//   })

program.on('--help', () => {
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    $ vue-make --help')
  console.log('    $ vue-make -h')
})

program.parse(process.argv)
