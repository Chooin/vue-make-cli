#!/usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const fs = require('fs')
const path = require('path')
const {
  createFile,
  hasFile
} = require('../utils/file')

program
  .version('1.0.12')

program
  .command('mixin [name]')
  .description(chalk.gray('    # create mixin file'))
  .action((name, options) => {
    hasFile({
      to: `./src/mixins/${name}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[mixin].js'),
        to: `./src/mixins/${name}.js`,
        replaceKey: name
      })
    }).catch(() => {
      console.log('已取消')
    })
  })

program
  .command('store [moduleName]')
  .description(chalk.gray('    # create module file for store'))
  .action((moduleName, options) => {
    hasFile({
      to: `./src/store/modules/${moduleName}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[store-module].js'),
        to: `./src/store/modules/${moduleName}.js`,
        replaceKey: moduleName
      })
    }).catch(() => {
      console.log('已取消')
    })
  })

program
  .command('directive [name]')
  .description(chalk.gray('    # create directive file'))
  .action((name, options) => {
    hasFile({
      to: `./src/directives/${name}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[directive].js'),
        to: `./src/directives/${name}.js`,
        replaceKey: name
      })
    }).catch(() => {
      console.log('已取消')
    })
  })

program
  .command('view [path]')
  .description(chalk.gray('    # create view file'))
  .action((name, options) => {
    hasFile({
      to: `./src/views/${name}`
    }).then(() => {
      fs.readdirSync(path.resolve(__dirname, '../templates/[view]')).forEach(file => {
        createFile({
          from: path.resolve(__dirname, `../templates/[view]/${file}`),
          to: `./src/views/${name}/${file}`,
          replaceKey: name
        })
      })
    }).catch(() => {
      console.log('已取消')
    })
  })

program
  .command('component [name]')
  .description(chalk.gray('    # create component file'))
  .action((name, options) => {
    hasFile({
      to: `./src/components/${name}`
    }).then(() => {
      fs.readdirSync(path.resolve(__dirname, '../templates/[component]')).forEach(file => {
        createFile({
          from: path.resolve(__dirname, `../templates/[component]/${file}`),
          to: `./src/components/${name}/${file}`,
          replaceKey: name
        })
      })
    }).catch(() => {
      console.log('已取消')
    })
  })

// program
//   .command('*')
//   .action(function (name, options) {
//     console.log(name, options)
//   })

program.on('--help', function(){
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    $ vue-make --help')
  console.log('    $ vue-make -h')
})

program.parse(process.argv)
