#!/usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const fs = require('fs')
const path = require('path')
const {
  createFile,
  hasFile
} = require('../utils/file')
const { STYLE_TYPE } = require('../config')

let CONFIG
let STYLE

const getConfig = () => {
  try {
    CONFIG = JSON.parse(fs.readFileSync('./.vue-make.json', 'utf8'))
    STYLE = STYLE_TYPE[CONFIG.styleType] || 'css'
  } catch (e) {
    console.log(`- Run ${chalk.yellow('vue-make init')} first`)
  }
}

const createStyleFile = ({
  from,
  to,
  replace
}) => {
  createFile({
    from: path.resolve(__dirname, `../templates/style/style.${STYLE}`),
    to: `${to}/style.${STYLE}`,
    replace
  })
}

const cancelled = e => {
  console.log(`- ${chalk.yellow('Cancelled')}`)
}

program
  .version('2.2.0')

program
  .command('init [type]')
  .description(chalk.gray('init'))
  .action((type = 'default') => {
    hasFile({
      to: `./.vue-make.json`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, `../templates/.vue-make/${type}.json`),
        to: `./.vue-make.json`,
        tipPath: false
      })
    }).catch(cancelled)
  })

program
  .command('page [path]')
  .description(chalk.gray('create a new page'))
  .action((pagePath, options) => {
    getConfig()
    if (CONFIG) {
      CONFIG = CONFIG.page
    } else {
      return
    }

    if (pagePath) {
      if (pagePath.indexOf('/') !== 0) pagePath = `/${pagePath}`
      let originName = pagePath.split('/').pop().toLowerCase()
      let name = `${CONFIG.targetDirectoryPrefix}${originName}`
      let to = `${CONFIG.directory}${pagePath.replace(originName, name)}`
      let className = CONFIG.stylePrefix || CONFIG.targetDirectoryPrefix ? `${CONFIG.stylePrefix}${name}` : name
      let styleType = CONFIG.styleType ? ` lang="${CONFIG.styleType}"` : ''
      hasFile({
        to
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, `../templates/[page]/index.vue`),
          to: `${to}/index.vue`,
          replace: [
            { from: 'name', to: name },
            { from: 'className', to: className },
            { from: 'styleType', to: styleType }
          ]
        })
        createStyleFile({
          to,
          replace: [
            { from: 'className', to: className }
          ]
        })
      }).catch(cancelled)
    }
  })

program
  .command('view [path]')
  .description(chalk.gray('create a new view'))
  .action((viewPath, options) => {
    getConfig()
    if (CONFIG) {
      CONFIG = CONFIG.view
    } else {
      return
    }

    if (viewPath) {
      if (viewPath.indexOf('/') !== 0) viewPath = `/${viewPath}`
      let originName = viewPath.split('/').pop().toLowerCase()
      let name = `${CONFIG.targetDirectoryPrefix}${originName}`
      let to = `${CONFIG.directory}${viewPath.replace(originName, name)}`
      let className = CONFIG.stylePrefix || CONFIG.targetDirectoryPrefix ? `${CONFIG.stylePrefix}${name}` : name
      let styleType = CONFIG.styleType ? ` lang="${CONFIG.styleType}"` : ''
      hasFile({
        to
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, `../templates/[view]/index.vue`),
          to: `${to}/index.vue`,
          replace: [
            { from: 'name', to: name },
            { from: 'className', to: className },
            { from: 'styleType', to: styleType }
          ]
        })
        createStyleFile({
          to,
          replace: [
            { from: 'className', to: className }
          ]
        })
      }).catch(cancelled)
    }
  })

program
  .command('component [name]')
  .description(chalk.gray('create a new component'))
  .action((name, options) => {
    getConfig()
    if (CONFIG) {
      CONFIG = CONFIG.component
    } else {
      return
    }

    if (name) {
      hasFile({
        to: `${CONFIG.directory}/${name}`
      }).then(() => {
        name = `${CONFIG.targetDirectoryPrefix}${name}`
        let to = `${CONFIG.directory}/${name}`
        let className = CONFIG.stylePrefix || CONFIG.targetDirectoryPrefix ? `${CONFIG.stylePrefix}${name}` : name
        let styleType = CONFIG.styleType ? ` lang="${CONFIG.styleType}"` : ''
        createFile({
          from: path.resolve(__dirname, `../templates/[component]/index.vue`),
          to: `${to}/index.vue`,
          replace: [
            { from: 'name', to: name },
            { from: 'className', to: className },
            { from: 'styleType', to: styleType }
          ]
        })
        createStyleFile({
          to,
          replace: [
            { from: 'className', to: className }
          ]
        })
      }).catch(cancelled)
    }
  })

program
  .command('mixin [name]')
  .description(chalk.gray('create a new mixin'))
  .action((name, options) => {
    getConfig()
    if (!CONFIG) return

    if (name) {
      hasFile({
        to: `${CONFIG.mixin.directory}/${name}.js`
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, '../templates/[mixin].js'),
          to: `${CONFIG.mixin.directory}/${name}.js`,
          replace: [
            { from: 'name', to: name }
          ]
        })
      }).catch(cancelled)
    }
  })

program
  .command('store-module [name]')
  .description(chalk.gray('create a new module for store'))
  .action((name, options) => {
    getConfig()
    if (!CONFIG) return

    const create = () => {
      hasFile({
        to: `${CONFIG.store.directory}/modules/${name}.js`
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, '../templates/[store-module].js'),
          to: `${CONFIG.store.directory}/modules/${name}.js`
        })
      }).catch(cancelled)
    }
    const store = () => {
      createFile({
        from: path.resolve(__dirname, '../templates/store/index.js'),
        to: `${CONFIG.store.directory}/index.js`,
        replace: [
          { from: 'name', to: name }
        ]
      })
      createFile({
        from: path.resolve(__dirname, '../templates/store/mutation-types.js'),
        to: `${CONFIG.store.directory}/mutation-types.js`
      })
    }
    hasFile({
      to: `${CONFIG.store.directory}/index.js`
    }).then(() => {
      store()
      create()
    }).catch(() => {
      create()
    })
  })

program
  .command('directive [name]')
  .description(chalk.gray('create a new directive'))
  .action((name, options) => {
    getConfig()
    if (!CONFIG) return

    hasFile({
      to: `${CONFIG.directive.directory}/${name}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[directive].js'),
        to: `${CONFIG.directive.directory}/${name}.js`,
        replace: [
          { from: 'name', to: name }
        ]
      })
    }).catch(cancelled)
  })

program.on('--help', () => {
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    $ vue-make --help')
  console.log('    $ vue-make -h')
})

program.parse(process.argv)
