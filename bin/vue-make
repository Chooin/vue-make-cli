#!/usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const fs = require('fs')
const inquirer = require('inquirer')
const path = require('path')
const { createFile } = require('../utils/create-file')

program
  .version('0.0.1')

program
  .command('mixin [name]')
  .description(chalk.gray('    # create mixin file'))
  .action((name, options) => {
    createFile({
      from: path.resolve(__dirname, '../templates/[mixin].js'),
      to: `./src/mixins/${name}.js`
    })
  })

program
  .command('store [moduleName]')
  .description(chalk.gray('    # create module file for store'))
  .action(function (moduleName, options) {
    // createFile({
    //   from: path.resolve(__dirname, '../templates/[mixin].js'),
    //   to: `./src/mixins/${name}.js`
    // })
  })

program
  .command('directive [name]')
  .description(chalk.gray('    # create directive file'))
  .action(function (name, options) {
    createFile({
      from: path.resolve(__dirname, '../templates/[directive].js'),
      to: `./src/directives/${name}.js`
    })
  })

program
  .command('view [path]')
  .description(chalk.gray('    # create view file'))
  .action((name, options) => {
    fs.readdirSync('./templates/[view]').forEach(file => {
      createFile({
        from: path.resolve(__dirname, `../templates/[view]/${file}`),
        to: `./src/views/${name}/${file}`
      })
    })
  })

program
  .command('component [name]')
  .description(chalk.gray('    # create component file'))
  .action((name, options) => {
    fs.readdirSync('./templates/[component]').forEach(file => {
      createFile({
        from: path.resolve(__dirname, `../templates/[component]/${file}`),
        to: `./src/components/${name}/${file}`
      })
    })
  })

// program
//   .command('*')
//   .action(function (name, options) {
//     console.log(name, options)
//   })

program.on('--help', function(){
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    $ vue-make --help')
  console.log('    $ vue-make -h')
})

program.parse(process.argv)
