#!/usr/bin/env node

const program = require('commander')
const chalk = require('chalk')
const fs = require('fs')
const path = require('path')
const {
  createFile,
  hasFile
} = require('../utils/file')

const STYLE_TYPE = {
  scss: 'scss',
  sass: 'sass',
  less: 'less',
  stylus: 'styl'
}

let CONFIG
try {
  CONFIG = JSON.parse(
    fs.readFileSync('./.vue-make.json', 'utf8') ||
    fs.readFileSync(path.resolve(__dirname, './.vue-make.json', 'utf8'))
  )
} catch (e) {
  throw `解析配置文件出错`
}

program
  .version('2.0.0')

program
  .command('init [type]')
  .description(chalk.gray('Init'))
  .action((type = 'default') => {
    hasFile({
      to: `./.vue-make.json`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, `../templates/.vue-make/${type}.json`),
        to: `./.vue-make.json`
      })
    }).catch(() => {
      console.log(chalk.yellow('cancelled'))
    })
  })

program
  .command('page [path]')
  .description(chalk.gray('Create a new page'))
  .action((pagePath, options) => {
    if (pagePath) {
      hasFile({
        to: `${CONFIG.page.directory}${pagePath}`
      }).then(() => {
        let name = pagePath.split('/').pop().toLowerCase()
        createFile({
          from: path.resolve(__dirname, `../templates/[page]/index.vue`),
          to: `${CONFIG.page.directory}${pagePath}/index.vue`,
          replace: [
            {
              from: 'name',
              to: name
            },
            {
              from: 'styleType',
              to: ''
            }
          ]
        })
        let styleName = STYLE_TYPE[CONFIG.styleType] && `style.${STYLE_TYPE[CONFIG.styleType]}`
        if (
          CONFIG.styleType &&
          styleName
        ) {
          createFile({
            from: path.resolve(__dirname, `../templates/style/${styleName}`),
            to: `${CONFIG.page.directory}${pagePath}/${styleName}`,
            replace: [
              {
                from: 'name',
                to: name
              }
            ]
          })
        } else {
          console.log(chalk.yellow('create style failed'))
        }
      }).catch(() => {
        console.log(chalk.yellow('cancelled'))
      })
    }
  })

program
  .command('view [path]')
  .description(chalk.gray('Create a new view'))
  .action((viewPath, options) => {
    if (viewPath) {
      hasFile({
        to: `${CONFIG.view.directory}${viewPath}`
      }).then(() => {
        let name = viewPath.split('/').pop().toLowerCase()
        createFile({
          from: path.resolve(__dirname, `../templates/[view]/index.vue`),
          to: `${CONFIG.view.directory}${viewPath}/index.vue`,
          replace: [
            {
              from: 'name',
              to: name
            },
            {
              from: 'styleType',
              to: ''
            }
          ]
        })
        let styleName = STYLE_TYPE[CONFIG.styleType] && `style.${STYLE_TYPE[CONFIG.styleType]}`
        if (
          CONFIG.styleType &&
          styleName
        ) {
          createFile({
            from: path.resolve(__dirname, `../templates/style/${styleName}`),
            to: `${CONFIG.view.directory}${viewPath}/${styleName}`,
            replace: [
              {
                from: 'name',
                to: name
              }
            ]
          })
        } else {
          console.log(chalk.yellow('create style failed'))
        }
      }).catch(() => {
        console.log(chalk.yellow('cancelled'))
      })
    }
  })

program
  .command('component [name]')
  .description(chalk.gray('Create a new component'))
  .action((name, options) => {
    if (name) {
      hasFile({
        to: `./src/components/${name}`
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, `../templates/[component]/index.vue`),
          to: `./src/components/${name}/index.vue`,
          replace: [
            {
              from: 'name',
              to: name
            },
            {
              from: 'styleType',
              to: ''
            }
          ]
        })
        let styleName = STYLE_TYPE[CONFIG.styleType] && `style.${STYLE_TYPE[CONFIG.styleType]}`
        if (
          CONFIG.styleType &&
          styleName
        ) {
          createFile({
            from: path.resolve(__dirname, `../templates/style/${styleName}`),
            to: `./src/components/${name}/${styleName}`,
            replace: [
              {
                from: 'name',
                to: name
              }
            ]
          })
        } else {
          console.log(chalk.yellow('create style failed'))
        }
      }).catch(() => {
        console.log(chalk.yellow('cancelled'))
      })
    }
  })

program
  .command('mixin [name]')
  .description(chalk.gray('Create a new mixin'))
  .action((name, options) => {
    if (name) {
      hasFile({
        to: `./src/mixins/${name}.js`
      }).then(() => {
        createFile({
          from: path.resolve(__dirname, '../templates/[mixin].js'),
          to: `./src/mixins/${name}.js`,
          replace: [
            {
              from: 'name',
              to: name
            }
          ]
        })
      }).catch(() => {
        console.log(chalk.yellow('cancelled'))
      })
    }
  })

program
  .command('store-module [name]')
  .description(chalk.gray('Create a new module for store'))
  .action((moduleName, options) => {
    hasFile({
      to: `./src/store/modules/${moduleName}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[store-module].js'),
        to: `./src/store/modules/${moduleName}.js`
      })
    }).catch(() => {
      console.log(chalk.yellow('cancelled'))
    })
  })

program
  .command('directive [name]')
  .description(chalk.gray('Create a new directive'))
  .action((name, options) => {
    hasFile({
      to: `./src/directives/${name}.js`
    }).then(() => {
      createFile({
        from: path.resolve(__dirname, '../templates/[directive].js'),
        to: `./src/directives/${name}.js`,
        replace: [
          {
            from: 'name',
            to: name
          }
        ]
      })
    }).catch(() => {
      console.log(chalk.yellow('cancelled'))
    })
  })

program.on('--help', () => {
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    $ vue-make --help')
  console.log('    $ vue-make -h')
})

program.parse(process.argv)
